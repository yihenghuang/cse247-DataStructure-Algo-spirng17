Studio 3 write up

Your TA's name:



Students in your studio group:

    Name        Student ID (begins with a 4)
	
1.Weiqiang Li	443012
2.han	wang	448064
3.Mingyu Cao	452198
4.Yiheng Huang	452257
5.
6.


Part A

What are three data types that can serve as T?
String, Integer, Double

Which class did you pick to examine its compareTo method?
Date

How did its compareTo method impose a natural order on that class's instances?
return (thisTime<anotherTime ? -1 : (thisTime==anotherTime ? 0 : 1));
if thisTime is larger than anotherTime then compareTo returns 1
if thisTime is equal to anotherTime then compareTo returns 0
if thisTime is smaller than anotherTime then compareTo returns -1

Part B

How does compareTo work?  Does it always return either -1, 0, or +1?
if thisTime is larger than anotherTime then compareTo returns 1
if thisTime is equal to anotherTime then compareTo returns 0
if thisTime is smaller than anotherTime then compareTo returns -1
it always return either -1, 0 or +1 for Date class

Part C

From your inspection of the LinkedList<T> class's source code:
Given a LinkedList<T> of size n, what is the asymptotic complexity, worst-case, 
for performing each of the following operations?

  1)  Appending to the end of that list  addLast(..)
  O(1)
  
  2)  Prepending to the beginning of that list   addFirst(...)
  O(1)
  
  3)  Inserting an element in the middle of the list  add(size/2, .....)
  O(n/2)
  
And for your implementation of a PriorityQueue using the Unordered List, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin
  O(n)
  
  5)  insert
  O(1)
  
  6)  isEmpty
  O(1)
  
Part D

From your implementation of OrderedArray, what is the asymptotic complexity, worst-case, for performing each of the following operations?

  1)  Adding an element at the end of the array
  O(n)
  
  2)  Inserting an element at the beginning of the array
  O(n)
  
  3)  Inserting an element in the middle of the list
  O(n)

And for your implementation of a PriorityQueue using the Ordered Array, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin
  O(n)
  
  5)  insert
  O(n)
  
  6)  isEmpty
  O(1)
 
 Are there situations when you would want to use the OrderedArray or the UnorderedList instead of
 the binary heap described in class?   Explain please.
 
 Possible situations:
 When I want to remove the largest value a couple of times, OrderedArray is preferred because it is more 
 efficient for OrderedArray to remove the biggest value.
 Or, when I want to remove the second biggest value, or the 4th biggest value, OrderedArray will be much
 more efficient because binary heap is not very "ordered".
 
 When the order does not matter at all, UnorderedList is preferred because it is more efficient to insert
 and change values.
 
